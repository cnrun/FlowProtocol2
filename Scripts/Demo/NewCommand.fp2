~Input CmdName: Befehlsname
~SetTitel $CmdName-Implementierung
>># Klasse erstellen
>* "New File" im Ordner Commands
>|Cmd$CmdName.cs
>># Code einfügen
>|namespace FlowProtocol2.Commands
>|{
>|    using System.Text.RegularExpressions;
>|    using FlowProtocol2.Core;
>|
>|    /// <summary>
>|    /// Implementiert den $CmdName-Befehl
>|    /// </summary>
>|    public class Cmd$CmdName : CmdBaseCommand
>|    {
>|        public string VarName { get; set; }
>|        public string Text { get; set; }
>|        // ToDo: Weitere Eigenschaften deklarieren
>|
>|        public static CommandParser GetComandParser()
>|        {
>|            return new CommandParser(@"^~$CmdName ([A-Za-z0-9]*)\s*=(.*)", (rc, m) => Create$CmdNameCommand(rc, m));
>|        }
>|
>|        private static CmdBaseCommand Create$CmdNameCommand(ReadContext rc, Match m)
>|        {
>|            Cmd$CmdName cmd = new Cmd$CmdName(rc);
>|            cmd.VarName = m.Groups[1].Value.Trim();
>|            cmd.Text = m.Groups[2].Value.Trim();
>|            // ToDo: Weitere Eigenschaften auslesen
>|            return cmd;
>|        }
>|
>|        public Cmd$CmdName(ReadContext readcontext) : base(readcontext)
>|        {
>|            VarName = string.Empty;
>|            Text = string.Empty;
>|            // ToDo: Weitere Standardwerte setzen
>|        }
>|
>|        public override CmdBaseCommand? Run(RunContext rc)
>|        {
>|            // ToDo: Run-Methode ausimplementieren
>|            return NextCommand;
>|        }
>|    }
>|}
>># Weitere Eigenschaften implementieren
># ToDo: Weitere Eigenschaften deklarieren
># ToDo: Weitere Eigenschaften auslesen
># ToDo: Weitere Standardwerte setzen
>># Rum-Methode ausimplementieren
># ToDo: Run-Methode ausimplementieren
>># Befehl in SkriptParser hinzufügen
># in ScriptParser.cs
># private void LoadCommands()
>|            CmdParser.Add(Cmd$CmdName.GetComandParser());