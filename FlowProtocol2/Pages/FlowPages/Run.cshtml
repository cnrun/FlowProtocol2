@page "{scripttag}"
@model FlowProtocol2.Pages.FlowPages.RunModel
@{
    ViewData["Title"] = @Model.ScriptName;
}
@if (Model.Errors.Any())
{
    <h2>@Model.ScriptName</h2>
    <hr>
    <p><strong>Hinweis:</strong> Beim Ausführen des Skriptes sind Fehler aufgetreten.
        Bitte wenden Sie sich an den Autoren der Vorlage oder einen Administrator, um die Korrekturen zu veranlassen:
    </p>
    <ol>
        @foreach (var eitem in Model.Errors)
        {
            <li>
                <strong>Fehler "@eitem.ErrorCode", @eitem.ErrorText</strong><br />
                Zeile @eitem.ReadContext.LineNumber in <i>@eitem.ReadContext.ScriptFilePath</i><br />
                <span style="color: #ff0000;">@eitem.ReadContext.CodeLine</span>
            </li>
        }
    </ol>
    <hr>
}
@if (Model.InputForm.InputItems.Any())
{
    @if (!string.IsNullOrEmpty(Model.InputForm.Titel))
    {
        <h2>@Model.InputForm.Titel</h2>
    }
    else if (!Model.Errors.Any())
    {
        <h2>@Model.ScriptName</h2>
    }
    <form method="post">
        @foreach (var k in Model.RunContext.GivenKeys)
        {
            <input type="hidden" asp-for="BoundVars[k]" />
        }
        @foreach (var inidx in Model.InputForm.InputItems)
        {
            var tinidx = inidx as Core.IMTextElement;
            @if (tinidx != null)
            {
                <div class="rendered-form">
                    <div class="formbuilder-text form-group">
                        <label for="@inidx.Key" class="formbuilder-text-label">@inidx.Promt<br></label>
                        @if (tinidx.HelpInfoBlock.HelpInfoLines.Any())
                        {
                            @await Html.PartialAsync("_IMHelpInfoBlock", tinidx.HelpInfoBlock)
                        }
                        <input type="text" class="form-control" access="false" id="@inidx.Key" asp-for="BoundVars[inidx.Key]"
                            maxlength="300">
                    </div>
                </div>
                <br>
            }
            var ogidx = inidx as Core.IMOptionGroupElement;
            @if (ogidx != null)
            {
                <div class="formbuilder-radio-group form-group">
                    <label class="formbuilder-radio-group-label">@ogidx.Promt</label>
                    @if (ogidx.HelpInfoBlock.HelpInfoLines.Any())
                    {
                        @await Html.PartialAsync("_IMHelpInfoBlock", ogidx.HelpInfoBlock)
                    }
                    <div class="radio-group">
                        @foreach (var op in ogidx.Options)
                        {
                            <div class="formbuilder-radio">
                                <span>
                                    <input value="@op.Key" type="radio" asp-for="BoundVars[ogidx.Key]" id="@op.UniqueKey">
                                    <label for="@op.UniqueKey">@op.Promt</label>
                                </span>
                            </div>
                        }
                    </div>
                </div>
                <br>
            }
        }
        <button type="submit" class="btn btn-primary">Weiter</button>
    </form>
}
else
{
    @if (!string.IsNullOrEmpty(Model.Document.Titel))
    {
        <h2>@Model.Document.Titel</h2>
    }
    else
    {
        <h2>@Model.ScriptName</h2>
    }
    @foreach (var sec in Model.Document.Sections)
    {
        @if (!string.IsNullOrEmpty(sec.Headline))
        {
            <h4>@sec.Headline</h4>
        }
        @foreach (var bl in sec.Textblocks)
        {
            @await Html.PartialAsync("_OMTextBlock", bl)
        }
    }
    <p>
        <a href=@Model.ScriptBaseURL class="btn btn-primary">Neue Ausführung</a>
        <a asp-page="/Index" class="btn btn-primary">Zurück zur Startseite</a>
    </p>
}
